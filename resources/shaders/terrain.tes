#version 420

layout(triangles, equal_spacing, ccw) in;

uniform mat4 viewProjectionMatrix;
uniform mat4 modelMatrix;
uniform vec3 eyeWorldPos;

struct SimplexNoise {
    float amplitude;
    float frequency;
};
uniform SimplexNoise noises[8];
uniform int noises_count;

in vec3 WorldPos_ES_in[];
in vec2 TexCoord_ES_in[];
// in vec3 Normal_ES_in[];

out vec3 WorldPos_FS_in;
out vec2 TexCoord_FS_in;
out vec3 Normal_FS_in;
out float height;

float random2D(in vec2 st) {
    vec3 seed = vec3(12312412, 123123, 124123);
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
{
  vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                -0.577350269189626,  // -1.0 + 2.0 * C.x
                0.024390243902439); // 1.0 / 41.0
  // First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

  // Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    + i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

  // Gradients: 41 points uniformly over a line, mapped onto a diamond.
  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

  // Normalise gradients implicitly by scaling m
  // Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

  // Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float simplex_noise(SimplexNoise noise, vec2 v) {
    return snoise(v * noise.frequency * 0.01) * noise.amplitude;
}

const mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);
const vec2 mys = vec2(1e4, 1e6);

vec2 rhash(vec2 uv) {
  uv *= myt;
  uv *= mys;
  return fract(fract(uv / mys) * uv);
}

vec3 hash(vec3 p) {
  return fract(sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)),
                        dot(p, vec3(57.0, 113.0, 1.0)),
                        dot(p, vec3(113.0, 1.0, 57.0)))) *
               43758.5453);
}

float voronoi2d(const in vec2 point) {
  vec2 p = floor(point);
  vec2 f = fract(point);
  float res = 0.0;
  for (int j = -1; j <= 1; j++) {
    for (int i = -1; i <= 1; i++) {
      vec2 b = vec2(i, j);
      vec2 r = vec2(b) - f + rhash(p + b);
      res += 1. / pow(dot(r, r), 8.);
    }
  }
  return pow(1. / res, 0.0625);
}


float terrain_height(vec2 pos) {
  // return voronoi2d(pos / 100.0 + vec2(10232, 1232)) * 10 + snoise(pos.xy / 5.0) * 10 + snoise(pos.xy * 3) * 0.2;
  // return voronoi2d(pos / 100.0 + vec2(10232, 1232)) * 10 + simplex_noise(noises[0], pos) + simplex_noise(noises[1], pos);

  float result = 0;
  for (int i = 0; i < noises_count; i++) {
      result += simplex_noise(noises[i], pos);
  }
  return result;
}

vec3 computeNormals(vec3 WorldPos)
{
  vec2 eps = vec2(0.1, 0.0);
  return normalize(
    vec3(
      terrain_height(WorldPos.xz - eps.xy) - terrain_height(WorldPos.xz + eps.xy),
      2 * eps.x,
      terrain_height(WorldPos.xz - eps.yx) - terrain_height(WorldPos.xz + eps.yx)
    )
  );
}

void main()
{
    // Interpolate the attributes of the output vertex using the barycentric coordinates
    TexCoord_FS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
    // Normal_FS_in = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);
    // Normal_FS_in = normalize(Normal_FS_in);
    WorldPos_FS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);

    // Displace the vertex along the normal
    // vec4 test = viewProjectionMatrix * vec4(WorldPos_FS_in, 1.0);
    // float displacement = terrain_height(test.xz * frequency);

    // float displacement = 0; //terrain_height(WorldPos_FS_in.xz * frequency);
    float displacement = terrain_height(WorldPos_FS_in.xz); //terrain_height(WorldPos_FS_in.xz * frequency);
    WorldPos_FS_in += vec3(0.0, 1.0, 0.0) * displacement;

    Normal_FS_in = computeNormals(WorldPos_FS_in);

    gl_Position = viewProjectionMatrix * vec4(WorldPos_FS_in, 1.0);
}
