#version 420

#include "noise.glsl"

layout(triangles, equal_spacing, ccw) in;
in DATA {
  vec3 world_pos;
  vec2 tex_coord;
  vec3 normal;
}
In[];

uniform mat4 viewProjectionMatrix;
uniform mat4 lightMatrix;
uniform mat4 viewMatrix;
uniform mat4 viewInverse;

// Cascading shadow maps
const int NUM_CASCADES = 3;

struct ShadowMap {
  float cascade_clip_splits[NUM_CASCADES];
  mat4 light_wvp_matrix[NUM_CASCADES];
  float blend_distance;
  bool debug_show_splits;
  bool debug_show_blend;
};
uniform ShadowMap shadow_map;

out vec4 shadow_light_pos[NUM_CASCADES];
out float shadow_clip_depth;

// Noise
struct Noise {
  int num_octaves;
  float amplitude;
  float frequency;
  float persistence;
  float lacunarity;
};
uniform Noise noise;

// Out data
out DATA {
  vec3 world_pos;
  vec3 view_pos;
  vec4 shadow_coord;
  vec2 tex_coord;
  vec3 normal;
  vec3 view_normal;
  vec3 tangent;
  vec3 bitangent;
  mat3 tangent_matrix;
}
Out;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
  return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
  return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float terrain_height(vec2 pos) {
  float noise_value = 0;
  float frequency = noise.frequency;
  float amplitude = noise.amplitude;

  for (int i = 0; i < noise.num_octaves; i++) {
    float n = 0;

    if (i == 0) {
      n = pow(voronoi2d(pos * frequency / 200.0), 2);
    } else if (i == 1) {
      n = snoise(pos * frequency / 400.0) / 1.5;
    } else {
      // n = voronoi2d(pos * frequency / 400.0 + vec2(112, 532));
      n = snoise(pos * frequency / 800.0 + vec2(1231, 721)) / 2;
    }

    noise_value += n * amplitude;
    amplitude *= noise.persistence;
    frequency *= noise.lacunarity;
  }

  return noise_value;  // + snoise(pos / 10000.0) * 500.0 +  + max(0, voronoi2d(pos / 5000.0) *
                       // 1000.0);
}

vec3 computeNormals(vec3 WorldPos) {
  vec2 eps = vec2(0.1, 0.0);
  return normalize(
      vec3(terrain_height(WorldPos.xz - eps.xy) - terrain_height(WorldPos.xz + eps.xy), 2 * eps.x,
           terrain_height(WorldPos.xz - eps.yx) - terrain_height(WorldPos.xz + eps.yx)));
}

vec3 computeTangent(vec3 WorldPos, vec3 normal) { return normalize(cross(normal, vec3(0, 1, 0))); }

void main() {
  // Interpolate the attributes of the output vertex using the barycentric coordinates
  Out.world_pos = interpolate3D(In[0].world_pos, In[1].world_pos, In[2].world_pos);
  Out.tex_coord = interpolate2D(In[0].tex_coord, In[1].tex_coord, In[2].tex_coord);
  // Out.normal = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);

  // Displace the vertex along the normal
  float displacement = terrain_height(Out.world_pos.xz);
  Out.world_pos += vec3(0.0, 1.0, 0.0) * displacement;
  Out.view_pos = (viewMatrix * vec4(Out.world_pos, 1.0)).xyz;

  Out.normal = computeNormals(Out.world_pos);
  Out.view_normal = (viewInverse * vec4(Out.normal, 0.0)).xyz;
  Out.tangent = computeTangent(Out.world_pos, Out.normal);
  Out.bitangent = normalize(cross(Out.tangent, Out.normal));

  Out.tangent_matrix = mat3(Out.tangent, Out.bitangent, Out.normal);

  Out.shadow_coord = lightMatrix * vec4(Out.view_pos, 1.f);

  gl_Position = viewProjectionMatrix * vec4(Out.world_pos, 1.0);

  // Cascading shadow map
  for (int i = 0; i < NUM_CASCADES; i++) {
    shadow_light_pos[i] = shadow_map.light_wvp_matrix[i] * vec4(Out.world_pos, 1.0);
  }

  shadow_clip_depth = gl_Position.z;
}
